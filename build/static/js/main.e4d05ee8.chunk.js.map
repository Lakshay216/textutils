{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","myStyle","SetMyStyle","useState","color","backgroundColor","border","btntext","setBtnText","React","createElement","classNameName","style","className","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","class","onClick","role","for","Navbar","props","mode","Link","to","title","aria-label","aria-current","aboutText","togglemode","htmlFor","placeholder","TextForm","text","setText","Fragment","heading","value","onChange","e","target","rows","handleUpClick","newText","toUpperCase","showAlert","handlelowClick","newText2","toLowerCase","handlecopy","document","getElementById","select","navigator","clipboard","writeText","handleextraspaces","split","join","clear","length","Alert","alert","word","lower","charAt","slice","capitalise","message","defaultProps","App","setMode","setAlert","setTimeout","Router","body","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.e4d05ee8.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nexport default function About() {\n    const [myStyle, SetMyStyle] = useState({\n        color: \"black\",\n        backgroundColor: \"white\",\n        border: \"\"\n    })\n    const [btntext, setBtnText] = useState(\"enable dark mode\")\n\n    function toggleStyle() {\n        if (myStyle.color === \"black\") {\n            SetMyStyle({\n                color: \"white\",\n                backgroundColor: \"black\",\n                border: \"1px solid white\"\n            })\n            setBtnText(\"enable light mode\")\n        }\n        else {\n            SetMyStyle({\n                color: \"black\",\n                backgroundColor: \"white\"\n            })\n            setBtnText(\"enable dark mode\")\n        }\n    }\n    return (\n        <div classNameName=\"container \" style={myStyle}>\n            <h1 className='my-3'>About us</h1>\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                            Accordion Item #1\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                            Accordion Item #2\n                        </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                            Accordion Item #3\n                        </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-check form-switch\">\n                <input class=\"form-check-input\" onClick={toggleStyle} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\n                <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">{btntext}</label>\n            </div>\n        </div>\n\n\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n            </li>\n\n          </ul>\n          <div className={`form-check form-switch mx-2 text-${props.mode==='light'?'dark':'light'}`}>\n            <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">enable dark mode</label>\n          </div>\n          <form className=\"d-flex\" role=\"search\">\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n          </form>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n  aboutText: PropTypes.string\n}\n\nNavbar.defaultProps = {\n  title: 'Enter Title here',\n  aboutText: 'about us',\n}\n","import React ,{useState} from 'react'\n\nexport default function TextForm(props) {\n    const handleUpClick =()=>{\n      \n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"converted to uppercase\" ,\"success\");\n    }\n    const handlelowClick =() =>{\n        let newText2 = text.toLowerCase();\n        setText(newText2)\n        props.showAlert(\"converted to lowercase\" ,'success');\n    }\n    const clear =()=>{\n      \n        let newText3 = (\"\");\n        setText(newText3)\n        props.showAlert(\"Text Cleared\" ,'success');\n\n    }\n    const handlecopy=()=>{\n        var text = document.getElementById(\"myBox\")\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Text Copied\" ,'success');\n\n\n    }\n    const handleextraspaces=()=>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n        props.showAlert(\"Extra spaces removed\" ,'success');\n\n    }\n    \n    const handleOnChange=(e)=>{\n      \n        setText(e.target.value)\n\n    }\n    const [text,setText] = useState(\"\")\n\n    return (\n        <>\n        <div className='container'  style={{color: props.mode==='dark'?'white':'black'}}>\n            <h1>{props.heading}  </h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" placeholder='Enter Text Here' value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style={{color: props.mode==='dark'?'white':'black' ,backgroundColor:props.mode==='dark'?'grey':'white'}}></textarea>\n            </div>\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>convert to Uppercase</button>\n            <button className=\"btn btn-primary my-2 mx-2\" onClick={handlelowClick}>convert to Lowercase</button>\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handlecopy}>copy text</button>\n            <button className=\"btn btn-success my-2 mx-2\" onClick={handleextraspaces}>remove extra spaces</button>\n            <button className=\"btn btn-danger my-2 mx-2\" onClick={clear}>Clear Text</button>\n\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\n            <h2> Your Text Summary</h2>\n           <p> {text.split(\" \").length} words and {text.length} characters</p> \n           <p> {0.008 * text.split(\" \").length } minutes needed to read</p>\n           <h3>preview</h3>\n           <p>{text.length>0?text:'Enter some text to preview'}</p>\n\n\n        </div>\n        </>\n        \n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    const capitalise =(word)=>{\n        let lower = word.toLowerCase()\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\n    }\n    return (\n       props.alert && <div className={`alert alert-${props.alert.type} alert fade show` } role=\"alert\">\n            <strong>{capitalise(props.alert.type)}</strong> {props.alert.message}\n        </div>\n    )\n}\n","\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  \n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const togglemode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\")\n      document.body.style.backgroundColor = 'grey'\n      showAlert(\"dark mode has been enabled\", \"success\")\n      document.title = \"TextUtils - darkmode\"\n      setTimeout(() => {\n        document.title = \"TextUtils - home\"\n      }, 2000);\n    }\n    else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = 'white'\n      showAlert(\" light mode has been enabled\", \"success\")\n      document.title = \"TextUtils - lightmode\"\n      setTimeout(() => {\n        document.title = \"TextUtils - home\"\n      }, 2000);\n    }\n\n  }\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000)\n  }\n  return (\n    <>\n<Router>\n  <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} togglemode={togglemode} />\n  <Alert alert={alert} />\n  <div className=\"container my-3\">\n    {/* <About/> */}\n    <Routes>\n      <Route path=\"/about\" element={<About />} />\n      <Route path=\"/\" element={<TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert} />} />\n    </Routes>\n  </div>\n</Router>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}